"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var page_1 = require("tns-core-modules/ui/page");
var observable_array_1 = require("tns-core-modules/data/observable-array");
var animation_1 = require("tns-core-modules/ui/animation/animation");
var firebase = require('../../../utils/firebase').I;
var user = require('../../../viewmodels/user').I;
var monthStrings = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Augt",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
var appViewModel = /** @class */ (function (_super) {
    __extends(appViewModel, _super);
    function appViewModel(page) {
        var _this = _super.call(this) || this;
        _this.appointments = new observable_array_1.ObservableArray();
        _this.faButtonAnimation = new Array();
        _this.upcomingAppointmentsListView = page_1.getViewById(page, 'upcoming-appointments');
        _this.page = page;
        _this.setupAnimations();
        var uid = user.getTotalData().uid;
        firebase.getAppointments(uid)
            .then(function (result) {
            for (var key in result.value) {
                firebase.getValueFirebase('appointments/' + result.value[key].key)
                    .then(function (result) {
                    var app = result.value;
                    console.log(result.value);
                    app.fullName = app.recieverFirstName + ' ' + app.recieverLastName;
                    app.timeString = _this._parseDate(app.date, app.month, app.startTime, app.endTime);
                    _this.appointments.push(result.value);
                });
            }
        });
        return _this;
    }
    appViewModel.prototype.fabTap = function (args) {
        var page = args.object.page;
        console.log("click");
        this.faButtonAnimationSet.play().then(function () { return page.frame.navigate("/views/home/app-page/choose-mentor-page/choose-mentor-page"); });
    };
    appViewModel.prototype._dateParser = function (date) {
        return (date.getMonth() + 1) + "/" + date.getDate() + "/" + date.getFullYear();
    };
    appViewModel.prototype.onAppointmentTap = function (args) {
        console.log(args.index);
    };
    appViewModel.prototype._parseDate = function (day, month, startTime, endTime) {
        return (monthStrings[month] + ' ' + day + ', ' + startTime + ' - ' + endTime);
    };
    appViewModel.prototype.setupAnimations = function () {
        this.faButton = page_1.getViewById(this.page, 'fa-button');
        this.faButtonAnimation.push({ target: this.faButton, scale: { x: 1.2, y: 1.2 }, duration: 190 });
        this.faButtonAnimation.push({ target: this.faButton, scale: { x: 1.01, y: 1.01 }, duration: 1 });
        this.faButtonAnimationSet = new animation_1.Animation(this.faButtonAnimation, true);
    };
    return appViewModel;
}(observable_1.Observable));
exports.appViewModel = appViewModel;
//# sourceMappingURL=data:application/json;base64,